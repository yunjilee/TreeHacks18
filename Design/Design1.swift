//
//  Design1.swift
//
//  Created on Feb 17, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class Design1: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawEditInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Bars/Status/Black
        // Warning: New symbols are not supported.
        /// Tab Bar
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 611)
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 21.92, y: 17.84))
            combinedShape.addLine(to: CGPoint(x: 24.06, y: 23.92))
            combinedShape.addLine(to: CGPoint(x: 17.5, y: 22.12))
            combinedShape.addLine(to: CGPoint(x: 17.5, y: 22.12))
            combinedShape.addCurve(to: CGPoint(x: 11.79, y: 23.59), controlPoint1: CGPoint(x: 15.81, y: 23.05), controlPoint2: CGPoint(x: 13.86, y: 23.59))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 11.79), controlPoint1: CGPoint(x: 5.28, y: 23.59), controlPoint2: CGPoint(x: 0, y: 18.31))
            combinedShape.addCurve(to: CGPoint(x: 11.79, y: 0), controlPoint1: CGPoint(x: 0, y: 5.28), controlPoint2: CGPoint(x: 5.28, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 23.59, y: 11.79), controlPoint1: CGPoint(x: 18.31, y: 0), controlPoint2: CGPoint(x: 23.59, y: 5.28))
            combinedShape.addCurve(to: CGPoint(x: 21.92, y: 17.84), controlPoint1: CGPoint(x: 23.59, y: 14), controlPoint2: CGPoint(x: 22.98, y: 16.07))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 21.92, y: 17.84))
            context.saveGState()
            context.translateBy(x: 62, y: 16)
            combinedShape.usesEvenOddFillRule = true
            UIColor(hue: 0.611, saturation: 0.019, brightness: 0.635, alpha: 1).setFill()
            combinedShape.fill()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape2 = UIBezierPath()
            combinedShape2.move(to: CGPoint(x: 5, y: 3))
            combinedShape2.addLine(to: CGPoint(x: 7, y: 3))
            combinedShape2.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 7.55, y: 3), controlPoint2: CGPoint(x: 8, y: 3.45))
            combinedShape2.addCurve(to: CGPoint(x: 7, y: 5), controlPoint1: CGPoint(x: 8, y: 4.55), controlPoint2: CGPoint(x: 7.55, y: 5))
            combinedShape2.addLine(to: CGPoint(x: 5, y: 5))
            combinedShape2.addLine(to: CGPoint(x: 5, y: 7))
            combinedShape2.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 5, y: 7.55), controlPoint2: CGPoint(x: 4.55, y: 8))
            combinedShape2.addCurve(to: CGPoint(x: 3, y: 7), controlPoint1: CGPoint(x: 3.45, y: 8), controlPoint2: CGPoint(x: 3, y: 7.55))
            combinedShape2.addLine(to: CGPoint(x: 3, y: 5))
            combinedShape2.addLine(to: CGPoint(x: 1, y: 5))
            combinedShape2.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 0.45, y: 5), controlPoint2: CGPoint(x: 0, y: 4.55))
            combinedShape2.addCurve(to: CGPoint(x: 1, y: 3), controlPoint1: CGPoint(x: 0, y: 3.45), controlPoint2: CGPoint(x: 0.45, y: 3))
            combinedShape2.addLine(to: CGPoint(x: 3, y: 3))
            combinedShape2.addLine(to: CGPoint(x: 3, y: 1))
            combinedShape2.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 3, y: 0.45), controlPoint2: CGPoint(x: 3.45, y: 0))
            combinedShape2.addCurve(to: CGPoint(x: 5, y: 1), controlPoint1: CGPoint(x: 4.55, y: 0), controlPoint2: CGPoint(x: 5, y: 0.45))
            combinedShape2.addLine(to: CGPoint(x: 5, y: 3))
            combinedShape2.close()
            combinedShape2.move(to: CGPoint(x: 5, y: 3))
            context.saveGState()
            context.translateBy(x: 70, y: 24)
            combinedShape2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            combinedShape2.fill()
            context.restoreGState()
            
            /// Profile Icon
            let profileIcon = UIBezierPath()
            profileIcon.move(to: CGPoint(x: 11.66, y: 8.97))
            profileIcon.addCurve(to: CGPoint(x: 7.17, y: 4.48), controlPoint1: CGPoint(x: 9.18, y: 8.97), controlPoint2: CGPoint(x: 7.17, y: 6.96))
            profileIcon.addCurve(to: CGPoint(x: 11.66, y: 0), controlPoint1: CGPoint(x: 7.17, y: 2.01), controlPoint2: CGPoint(x: 9.18, y: 0))
            profileIcon.addCurve(to: CGPoint(x: 16.14, y: 4.48), controlPoint1: CGPoint(x: 14.13, y: 0), controlPoint2: CGPoint(x: 16.14, y: 2.01))
            profileIcon.addCurve(to: CGPoint(x: 11.66, y: 8.97), controlPoint1: CGPoint(x: 16.14, y: 6.96), controlPoint2: CGPoint(x: 14.13, y: 8.97))
            profileIcon.close()
            profileIcon.move(to: CGPoint(x: 11.36, y: 22.02))
            profileIcon.addCurve(to: CGPoint(x: 0, y: 21.52), controlPoint1: CGPoint(x: 5.09, y: 22.02), controlPoint2: CGPoint(x: 0, y: 27.79))
            profileIcon.addCurve(to: CGPoint(x: 11.36, y: 10.16), controlPoint1: CGPoint(x: 0, y: 15.25), controlPoint2: CGPoint(x: 5.09, y: 10.16))
            profileIcon.addCurve(to: CGPoint(x: 22.72, y: 21.52), controlPoint1: CGPoint(x: 17.63, y: 10.16), controlPoint2: CGPoint(x: 22.72, y: 15.25))
            profileIcon.addCurve(to: CGPoint(x: 11.36, y: 22.02), controlPoint1: CGPoint(x: 22.72, y: 27.79), controlPoint2: CGPoint(x: 17.63, y: 22.02))
            profileIcon.close()
            profileIcon.move(to: CGPoint(x: 11.36, y: 22.02))
            context.saveGState()
            context.translateBy(x: 174, y: 15)
            profileIcon.usesEvenOddFillRule = true
            UIColor(hue: 0.536, saturation: 0.447, brightness: 0.894, alpha: 1).setFill()
            profileIcon.fill()
            context.restoreGState()
            
            /// Line
            let line = UIBezierPath()
            line.move(to: CGPoint(x: 0.5, y: 1.5))
            line.addLine(to: CGPoint(x: 375.51, y: 1.5))
            context.saveGState()
            line.lineCapStyle = .square
            line.lineWidth = 1
            UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
            line.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// GENERAL
        let gENERAL = NSMutableAttributedString(string: "GENERAL")
        gENERAL.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 18)!, range: NSRange(location: 0, length: gENERAL.length))
        context.saveGState()
        gENERAL.draw(at: CGPoint(x: 30, y: 222))
        context.restoreGState()
        /// Date of Birth
        let dateOfBirth = NSMutableAttributedString(string: "Date of Birth")
        dateOfBirth.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: dateOfBirth.length))
        context.saveGState()
        dateOfBirth.draw(in: CGRect(x: 32, y: 267, width: 129, height: 21))
        context.restoreGState()
        /// 01/22/1996
        let _01221996 = NSMutableAttributedString(string: "01/22/1996")
        _01221996.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 16)!, range: NSRange(location: 0, length: _01221996.length))
        context.saveGState()
        _01221996.draw(in: CGRect(x: 161, y: 267, width: 129, height: 21))
        context.restoreGState()
        /// 5’ 6’’
        let _56 = NSMutableAttributedString(string: "5’ 6’’")
        _56.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 16)!, range: NSRange(location: 0, length: _56.length))
        context.saveGState()
        _56.draw(in: CGRect(x: 161, y: 315, width: 129, height: 21))
        context.restoreGState()
        /// 125 lbs.
        let _125Lbs = NSMutableAttributedString(string: "125 lbs.")
        _125Lbs.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 16)!, range: NSRange(location: 0, length: _125Lbs.length))
        context.saveGState()
        _125Lbs.draw(in: CGRect(x: 94, y: 363, width: 129, height: 21))
        context.restoreGState()
        /// SYMPTOMS
        let sYMPTOMS = NSMutableAttributedString(string: "SYMPTOMS")
        sYMPTOMS.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 18)!, range: NSRange(location: 0, length: sYMPTOMS.length))
        context.saveGState()
        sYMPTOMS.draw(at: CGPoint(x: 29, y: 490))
        context.restoreGState()
        /// Line
        let line2 = UIBezierPath()
        line2.move(to: CGPoint(x: 0.5, y: 1.5))
        line2.addLine(to: CGPoint(x: 375.51, y: 1.5))
        context.saveGState()
        context.translateBy(x: 0, y: 252)
        line2.lineCapStyle = .square
        line2.lineWidth = 1
        UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
        line2.stroke()
        context.restoreGState()
        /// Line
        let line3 = UIBezierPath()
        line3.move(to: CGPoint(x: 0.5, y: 1.5))
        line3.addLine(to: CGPoint(x: 375.51, y: 1.5))
        context.saveGState()
        context.translateBy(x: 0, y: 298)
        line3.lineCapStyle = .square
        line3.lineWidth = 1
        UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
        line3.stroke()
        context.restoreGState()
        /// Runny nose
        let runnyNose = NSMutableAttributedString(string: "Runny nose")
        runnyNose.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: runnyNose.length))
        context.saveGState()
        runnyNose.draw(in: CGRect(x: 31, y: 534, width: 129, height: 21))
        context.restoreGState()
        /// Line
        let line4 = UIBezierPath()
        line4.move(to: CGPoint(x: 0.5, y: 1.5))
        line4.addLine(to: CGPoint(x: 375.51, y: 1.5))
        context.saveGState()
        context.translateBy(x: -1, y: 565)
        line4.lineCapStyle = .square
        line4.lineWidth = 1
        UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
        line4.stroke()
        context.restoreGState()
        /// Height
        let height = NSMutableAttributedString(string: "Height")
        height.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: height.length))
        context.saveGState()
        height.draw(in: CGRect(x: 32, y: 315, width: 129, height: 21))
        context.restoreGState()
        /// Line
        let line5 = UIBezierPath()
        line5.move(to: CGPoint(x: 0.5, y: 1.5))
        line5.addLine(to: CGPoint(x: 375.51, y: 1.5))
        context.saveGState()
        context.translateBy(x: 0, y: 346)
        line5.lineCapStyle = .square
        line5.lineWidth = 1
        UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
        line5.stroke()
        context.restoreGState()
        /// Weight
        let weight = NSMutableAttributedString(string: "Weight")
        weight.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: weight.length))
        context.saveGState()
        weight.draw(in: CGRect(x: -33, y: 363, width: 129, height: 21))
        context.restoreGState()
        /// Line
        let line6 = UIBezierPath()
        line6.move(to: CGPoint(x: 0.5, y: 1.5))
        line6.addLine(to: CGPoint(x: 375.51, y: 1.5))
        context.saveGState()
        context.translateBy(x: 0, y: 393)
        line6.lineCapStyle = .square
        line6.lineWidth = 1
        UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
        line6.stroke()
        context.restoreGState()
        /// Sex
        let sex = NSMutableAttributedString(string: "Sex")
        sex.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: sex.length))
        context.saveGState()
        sex.draw(in: CGRect(x: 32, y: 412, width: 98, height: 21))
        context.restoreGState()
        /// Line
        let line7 = UIBezierPath()
        line7.move(to: CGPoint(x: 0.5, y: 1.5))
        line7.addLine(to: CGPoint(x: 375.51, y: 1.5))
        context.saveGState()
        context.translateBy(x: -1, y: 445)
        line7.lineCapStyle = .square
        line7.lineWidth = 1
        UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
        line7.stroke()
        context.restoreGState()
        /// +
        let layer = NSMutableAttributedString(string: "+")
        layer.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 36)!, range: NSRange(location: 0, length: layer.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            layer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
        }
        context.saveGState()
        layer.draw(in: CGRect(x: 316, y: 211, width: 34, height: 46))
        context.restoreGState()
        /// Line
        let line8 = UIBezierPath()
        line8.move(to: CGPoint(x: 0.5, y: 1.5))
        line8.addLine(to: CGPoint(x: 375.51, y: 1.5))
        context.saveGState()
        context.translateBy(x: -1, y: 521)
        line8.lineCapStyle = .square
        line8.lineWidth = 1
        UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
        line8.stroke()
        context.restoreGState()
        /// +
        let layer2 = NSMutableAttributedString(string: "+")
        layer2.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 36)!, range: NSRange(location: 0, length: layer2.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            layer2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer2.length))
        }
        context.saveGState()
        layer2.draw(in: CGRect(x: 315, y: 480, width: 34, height: 46))
        context.restoreGState()
        /// 01/22/1996
        let _2 = NSMutableAttributedString(string: "01/22/1996")
        _2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: _2.length))
        context.saveGState()
        _2.draw(in: CGRect(x: 161, y: 267, width: 129, height: 21))
        context.restoreGState()
        /// Anna Smith
        let annaSmith = NSMutableAttributedString(string: "Anna Smith")
        annaSmith.addAttribute(.font, value: UIFont(name: "ProximaNovaA-Bold", size: 25)!, range: NSRange(location: 0, length: annaSmith.length))
        context.saveGState()
        annaSmith.draw(at: CGPoint(x: 121, y: 156))
        context.restoreGState()
        /// notifications-button
        // Warning: Image layers are not supported.
        /// Rectangle 2
        let rectangle2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 174, height: 35), cornerRadius: 4)
        context.saveGState()
        context.translateBy(x: 156, y: 403)
        UIColor.white.setFill()
        rectangle2.fill()
        context.saveGState()
        rectangle2.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle2.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.611, saturation: 0.019, brightness: 0.635, alpha: 1).setStroke()
        rectangle2.stroke()
        context.restoreGState()
        context.restoreGState()
        /// Fema
        let fema = NSMutableAttributedString(string: "Fema")
        fema.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 16)!, range: NSRange(location: 0, length: fema.length))
        context.saveGState()
        fema.draw(at: CGPoint(x: 167, y: 411))
        context.restoreGState()
        /// Rectangle 5
        let rectangle5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 98, height: 47))
        context.saveGState()
        context.translateBy(x: 277, y: 347)
        UIColor(hue: 0.999, saturation: 0.647, brightness: 1, alpha: 1).setFill()
        rectangle5.fill()
        context.restoreGState()
        /// Remove
        let remove = NSMutableAttributedString(string: "Remove")
        remove.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 14)!, range: NSRange(location: 0, length: remove.length))
        context.saveGState()
        remove.draw(at: CGPoint(x: 300, y: 362))
        context.restoreGState()
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 179, y: 347)
            
            /// Rectangle 5
            let rectangle7 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 98, height: 47))
            context.saveGState()
            UIColor(hue: 0.611, saturation: 0.019, brightness: 0.635, alpha: 1).setFill()
            rectangle7.fill()
            context.restoreGState()
            
            /// Edit
            let edit = NSMutableAttributedString(string: "Edit")
            edit.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 14)!, range: NSRange(location: 0, length: edit.length))
            context.saveGState()
            edit.draw(at: CGPoint(x: 36, y: 15))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Mask
        let mask = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 104, height: 104))
        context.saveGState()
        context.translateBy(x: 136, y: 46)
        UIColor(white: 0.847, alpha: 1).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 136, y: 46))
        mask.addClip()
        
        /// profile_pic
        // Warning: Image layers are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawAddInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Bars/Status/Black
        // Warning: New symbols are not supported.
        /// bg
        context.saveGState()
        context.setAlpha(0.31)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 0, y: 46)
            
            /// Tab Bar
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 565)
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint(x: 21.92, y: 17.84))
                combinedShape.addLine(to: CGPoint(x: 24.06, y: 23.92))
                combinedShape.addLine(to: CGPoint(x: 17.5, y: 22.12))
                combinedShape.addLine(to: CGPoint(x: 17.5, y: 22.12))
                combinedShape.addCurve(to: CGPoint(x: 11.79, y: 23.59), controlPoint1: CGPoint(x: 15.81, y: 23.05), controlPoint2: CGPoint(x: 13.86, y: 23.59))
                combinedShape.addCurve(to: CGPoint(x: 0, y: 11.79), controlPoint1: CGPoint(x: 5.28, y: 23.59), controlPoint2: CGPoint(x: 0, y: 18.31))
                combinedShape.addCurve(to: CGPoint(x: 11.79, y: 0), controlPoint1: CGPoint(x: 0, y: 5.28), controlPoint2: CGPoint(x: 5.28, y: 0))
                combinedShape.addCurve(to: CGPoint(x: 23.59, y: 11.79), controlPoint1: CGPoint(x: 18.31, y: 0), controlPoint2: CGPoint(x: 23.59, y: 5.28))
                combinedShape.addCurve(to: CGPoint(x: 21.92, y: 17.84), controlPoint1: CGPoint(x: 23.59, y: 14), controlPoint2: CGPoint(x: 22.98, y: 16.07))
                combinedShape.close()
                combinedShape.move(to: CGPoint(x: 21.92, y: 17.84))
                context.saveGState()
                context.translateBy(x: 62, y: 16)
                combinedShape.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.019, brightness: 0.635, alpha: 1).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath()
                combinedShape2.move(to: CGPoint(x: 5, y: 3))
                combinedShape2.addLine(to: CGPoint(x: 7, y: 3))
                combinedShape2.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 7.55, y: 3), controlPoint2: CGPoint(x: 8, y: 3.45))
                combinedShape2.addCurve(to: CGPoint(x: 7, y: 5), controlPoint1: CGPoint(x: 8, y: 4.55), controlPoint2: CGPoint(x: 7.55, y: 5))
                combinedShape2.addLine(to: CGPoint(x: 5, y: 5))
                combinedShape2.addLine(to: CGPoint(x: 5, y: 7))
                combinedShape2.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 5, y: 7.55), controlPoint2: CGPoint(x: 4.55, y: 8))
                combinedShape2.addCurve(to: CGPoint(x: 3, y: 7), controlPoint1: CGPoint(x: 3.45, y: 8), controlPoint2: CGPoint(x: 3, y: 7.55))
                combinedShape2.addLine(to: CGPoint(x: 3, y: 5))
                combinedShape2.addLine(to: CGPoint(x: 1, y: 5))
                combinedShape2.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 0.45, y: 5), controlPoint2: CGPoint(x: 0, y: 4.55))
                combinedShape2.addCurve(to: CGPoint(x: 1, y: 3), controlPoint1: CGPoint(x: 0, y: 3.45), controlPoint2: CGPoint(x: 0.45, y: 3))
                combinedShape2.addLine(to: CGPoint(x: 3, y: 3))
                combinedShape2.addLine(to: CGPoint(x: 3, y: 1))
                combinedShape2.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 3, y: 0.45), controlPoint2: CGPoint(x: 3.45, y: 0))
                combinedShape2.addCurve(to: CGPoint(x: 5, y: 1), controlPoint1: CGPoint(x: 4.55, y: 0), controlPoint2: CGPoint(x: 5, y: 0.45))
                combinedShape2.addLine(to: CGPoint(x: 5, y: 3))
                combinedShape2.close()
                combinedShape2.move(to: CGPoint(x: 5, y: 3))
                context.saveGState()
                context.translateBy(x: 70, y: 24)
                combinedShape2.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                /// Profile Icon
                let profileIcon = UIBezierPath()
                profileIcon.move(to: CGPoint(x: 11.66, y: 8.97))
                profileIcon.addCurve(to: CGPoint(x: 7.17, y: 4.48), controlPoint1: CGPoint(x: 9.18, y: 8.97), controlPoint2: CGPoint(x: 7.17, y: 6.96))
                profileIcon.addCurve(to: CGPoint(x: 11.66, y: 0), controlPoint1: CGPoint(x: 7.17, y: 2.01), controlPoint2: CGPoint(x: 9.18, y: 0))
                profileIcon.addCurve(to: CGPoint(x: 16.14, y: 4.48), controlPoint1: CGPoint(x: 14.13, y: 0), controlPoint2: CGPoint(x: 16.14, y: 2.01))
                profileIcon.addCurve(to: CGPoint(x: 11.66, y: 8.97), controlPoint1: CGPoint(x: 16.14, y: 6.96), controlPoint2: CGPoint(x: 14.13, y: 8.97))
                profileIcon.close()
                profileIcon.move(to: CGPoint(x: 11.36, y: 22.02))
                profileIcon.addCurve(to: CGPoint(x: 0, y: 21.52), controlPoint1: CGPoint(x: 5.09, y: 22.02), controlPoint2: CGPoint(x: 0, y: 27.79))
                profileIcon.addCurve(to: CGPoint(x: 11.36, y: 10.16), controlPoint1: CGPoint(x: 0, y: 15.25), controlPoint2: CGPoint(x: 5.09, y: 10.16))
                profileIcon.addCurve(to: CGPoint(x: 22.72, y: 21.52), controlPoint1: CGPoint(x: 17.63, y: 10.16), controlPoint2: CGPoint(x: 22.72, y: 15.25))
                profileIcon.addCurve(to: CGPoint(x: 11.36, y: 22.02), controlPoint1: CGPoint(x: 22.72, y: 27.79), controlPoint2: CGPoint(x: 17.63, y: 22.02))
                profileIcon.close()
                profileIcon.move(to: CGPoint(x: 11.36, y: 22.02))
                context.saveGState()
                context.translateBy(x: 174, y: 15)
                profileIcon.usesEvenOddFillRule = true
                UIColor(hue: 0.536, saturation: 0.447, brightness: 0.894, alpha: 1).setFill()
                profileIcon.fill()
                context.restoreGState()
                
                /// Line
                let line = UIBezierPath()
                line.move(to: CGPoint(x: 0.5, y: 1.5))
                line.addLine(to: CGPoint(x: 375.51, y: 1.5))
                context.saveGState()
                line.lineCapStyle = .square
                line.lineWidth = 1
                UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
                line.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 165)
                
                /// GENERAL
                let gENERAL = NSMutableAttributedString(string: "GENERAL")
                gENERAL.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 18)!, range: NSRange(location: 0, length: gENERAL.length))
                context.saveGState()
                gENERAL.draw(at: CGPoint(x: 30, y: 11))
                context.restoreGState()
                
                /// Date of Birth
                let dateOfBirth = NSMutableAttributedString(string: "Date of Birth")
                dateOfBirth.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: dateOfBirth.length))
                context.saveGState()
                dateOfBirth.draw(in: CGRect(x: 32, y: 56, width: 129, height: 21))
                context.restoreGState()
                
                /// 01/22/1996
                let _01221996 = NSMutableAttributedString(string: "01/22/1996")
                _01221996.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 16)!, range: NSRange(location: 0, length: _01221996.length))
                context.saveGState()
                _01221996.draw(in: CGRect(x: 161, y: 56, width: 129, height: 21))
                context.restoreGState()
                
                /// 5’ 6’’
                let _56 = NSMutableAttributedString(string: "5’ 6’’")
                _56.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 16)!, range: NSRange(location: 0, length: _56.length))
                context.saveGState()
                _56.draw(in: CGRect(x: 161, y: 104, width: 129, height: 21))
                context.restoreGState()
                
                /// 125 lbs.
                let _125Lbs = NSMutableAttributedString(string: "125 lbs.")
                _125Lbs.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 16)!, range: NSRange(location: 0, length: _125Lbs.length))
                context.saveGState()
                _125Lbs.draw(in: CGRect(x: 159, y: 151, width: 129, height: 21))
                context.restoreGState()
                
                /// SYMPTOMS
                let sYMPTOMS = NSMutableAttributedString(string: "SYMPTOMS")
                sYMPTOMS.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 18)!, range: NSRange(location: 0, length: sYMPTOMS.length))
                context.saveGState()
                sYMPTOMS.draw(at: CGPoint(x: 30, y: 222))
                context.restoreGState()
                
                /// MEDICAL HISTORY
                let mEDICALHISTORY = NSMutableAttributedString(string: "MEDICAL HISTORY")
                mEDICALHISTORY.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 18)!, range: NSRange(location: 0, length: mEDICALHISTORY.length))
                context.saveGState()
                mEDICALHISTORY.draw(at: CGPoint(x: 32, y: 333))
                context.restoreGState()
                
                /// Line
                let line2 = UIBezierPath()
                line2.move(to: CGPoint(x: 0.5, y: 1.5))
                line2.addLine(to: CGPoint(x: 375.51, y: 1.5))
                context.saveGState()
                context.translateBy(x: 0, y: 41)
                line2.lineCapStyle = .square
                line2.lineWidth = 1
                UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
                line2.stroke()
                context.restoreGState()
                
                /// Line
                let line3 = UIBezierPath()
                line3.move(to: CGPoint(x: 0.5, y: 1.5))
                line3.addLine(to: CGPoint(x: 375.51, y: 1.5))
                context.saveGState()
                context.translateBy(x: 0, y: 87)
                line3.lineCapStyle = .square
                line3.lineWidth = 1
                UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
                line3.stroke()
                context.restoreGState()
                
                /// Runny nose
                let runnyNose = NSMutableAttributedString(string: "Runny nose")
                runnyNose.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: runnyNose.length))
                context.saveGState()
                runnyNose.draw(in: CGRect(x: 32, y: 266, width: 129, height: 21))
                context.restoreGState()
                
                /// Line
                let line4 = UIBezierPath()
                line4.move(to: CGPoint(x: 0.5, y: 1.5))
                line4.addLine(to: CGPoint(x: 375.51, y: 1.5))
                context.saveGState()
                context.translateBy(x: 0, y: 297)
                line4.lineCapStyle = .square
                line4.lineWidth = 1
                UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
                line4.stroke()
                context.restoreGState()
                
                /// Height
                let height = NSMutableAttributedString(string: "Height")
                height.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: height.length))
                context.saveGState()
                height.draw(in: CGRect(x: 32, y: 104, width: 129, height: 21))
                context.restoreGState()
                
                /// Line
                let line5 = UIBezierPath()
                line5.move(to: CGPoint(x: 0.5, y: 1.5))
                line5.addLine(to: CGPoint(x: 375.51, y: 1.5))
                context.saveGState()
                context.translateBy(x: 0, y: 135)
                line5.lineCapStyle = .square
                line5.lineWidth = 1
                UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
                line5.stroke()
                context.restoreGState()
                
                /// Weight
                let weight = NSMutableAttributedString(string: "Weight")
                weight.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: weight.length))
                context.saveGState()
                weight.draw(in: CGRect(x: 32, y: 151, width: 129, height: 21))
                context.restoreGState()
                
                /// Line
                let line6 = UIBezierPath()
                line6.move(to: CGPoint(x: 0.5, y: 1.5))
                line6.addLine(to: CGPoint(x: 375.51, y: 1.5))
                context.saveGState()
                context.translateBy(x: 0, y: 182)
                line6.lineCapStyle = .square
                line6.lineWidth = 1
                UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
                line6.stroke()
                context.restoreGState()
                
                /// +
                let layer = NSMutableAttributedString(string: "+")
                layer.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 36)!, range: NSRange(location: 0, length: layer.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    layer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
                }
                context.saveGState()
                layer.draw(in: CGRect(x: 316, y: 0, width: 34, height: 46))
                context.restoreGState()
                
                /// Line
                let line7 = UIBezierPath()
                line7.move(to: CGPoint(x: 0.5, y: 1.5))
                line7.addLine(to: CGPoint(x: 375.51, y: 1.5))
                context.saveGState()
                context.translateBy(x: 0, y: 253)
                line7.lineCapStyle = .square
                line7.lineWidth = 1
                UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
                line7.stroke()
                context.restoreGState()
                
                /// +
                let layer2 = NSMutableAttributedString(string: "+")
                layer2.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 36)!, range: NSRange(location: 0, length: layer2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    layer2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer2.length))
                }
                context.saveGState()
                layer2.draw(in: CGRect(x: 316, y: 212, width: 34, height: 46))
                context.restoreGState()
                
                /// Line
                let line8 = UIBezierPath()
                line8.move(to: CGPoint(x: 0.5, y: 1.5))
                line8.addLine(to: CGPoint(x: 375.51, y: 1.5))
                context.saveGState()
                context.translateBy(x: 0, y: 364)
                line8.lineCapStyle = .square
                line8.lineWidth = 1
                UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
                line8.stroke()
                context.restoreGState()
                
                /// 01/22/1996
                let _2 = NSMutableAttributedString(string: "01/22/1996")
                _2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: _2.length))
                context.saveGState()
                _2.draw(in: CGRect(x: 161, y: 56, width: 129, height: 21))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Anna Smith
            let annaSmith = NSMutableAttributedString(string: "Anna Smith")
            annaSmith.addAttribute(.font, value: UIFont(name: "ProximaNovaA-Bold", size: 25)!, range: NSRange(location: 0, length: annaSmith.length))
            context.saveGState()
            annaSmith.draw(at: CGPoint(x: 121, y: 110))
            context.restoreGState()
            
            /// notifications-button
            // Warning: Image layers are not supported.
            
            /// Mask
            let mask = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 104, height: 104))
            context.saveGState()
            context.translateBy(x: 136, y: 0)
            UIColor(white: 0.847, alpha: 1).setFill()
            mask.fill()
            context.restoreGState()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.apply(CGAffineTransform(translationX: 136, y: 0))
            mask.addClip()
            
            /// profile_pic
            // Warning: Image layers are not supported.
            
            context.restoreGState()
            // End Mask (Outline Mask)
        }
        context.endTransparencyLayer()
        context.restoreGState()
        /// Rectangle
        let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 256, height: 312), cornerRadius: 5)
        context.saveGState()
        context.translateBy(x: 60, y: 177)
        UIColor(white: 0.932, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        /// Cells/Table/Cell
        // Warning: New symbols are not supported.
        /// Cells/Table/Cell
        // Warning: New symbols are not supported.
        /// Cells/Table/Cell
        // Warning: New symbols are not supported.
        /// Cells/Table/Cell
        // Warning: New symbols are not supported.
        /// Select an entry
        let selectAnEntry = NSMutableAttributedString(string: "Select an entry")
        selectAnEntry.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 20)!, range: NSRange(location: 0, length: selectAnEntry.length))
        context.saveGState()
        selectAnEntry.draw(at: CGPoint(x: 121, y: 235))
        context.restoreGState()
        /// clear-button
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Bars/Status/Black
        // Warning: New symbols are not supported.
        /// Tab Bar
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 611)
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 21.92, y: 17.84))
            combinedShape.addLine(to: CGPoint(x: 24.06, y: 23.92))
            combinedShape.addLine(to: CGPoint(x: 17.5, y: 22.12))
            combinedShape.addLine(to: CGPoint(x: 17.5, y: 22.12))
            combinedShape.addCurve(to: CGPoint(x: 11.79, y: 23.59), controlPoint1: CGPoint(x: 15.81, y: 23.05), controlPoint2: CGPoint(x: 13.86, y: 23.59))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 11.79), controlPoint1: CGPoint(x: 5.28, y: 23.59), controlPoint2: CGPoint(x: 0, y: 18.31))
            combinedShape.addCurve(to: CGPoint(x: 11.79, y: 0), controlPoint1: CGPoint(x: 0, y: 5.28), controlPoint2: CGPoint(x: 5.28, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 23.59, y: 11.79), controlPoint1: CGPoint(x: 18.31, y: 0), controlPoint2: CGPoint(x: 23.59, y: 5.28))
            combinedShape.addCurve(to: CGPoint(x: 21.92, y: 17.84), controlPoint1: CGPoint(x: 23.59, y: 14), controlPoint2: CGPoint(x: 22.98, y: 16.07))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 21.92, y: 17.84))
            context.saveGState()
            context.translateBy(x: 62, y: 16)
            combinedShape.usesEvenOddFillRule = true
            UIColor(hue: 0.611, saturation: 0.019, brightness: 0.635, alpha: 1).setFill()
            combinedShape.fill()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape2 = UIBezierPath()
            combinedShape2.move(to: CGPoint(x: 5, y: 3))
            combinedShape2.addLine(to: CGPoint(x: 7, y: 3))
            combinedShape2.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 7.55, y: 3), controlPoint2: CGPoint(x: 8, y: 3.45))
            combinedShape2.addCurve(to: CGPoint(x: 7, y: 5), controlPoint1: CGPoint(x: 8, y: 4.55), controlPoint2: CGPoint(x: 7.55, y: 5))
            combinedShape2.addLine(to: CGPoint(x: 5, y: 5))
            combinedShape2.addLine(to: CGPoint(x: 5, y: 7))
            combinedShape2.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 5, y: 7.55), controlPoint2: CGPoint(x: 4.55, y: 8))
            combinedShape2.addCurve(to: CGPoint(x: 3, y: 7), controlPoint1: CGPoint(x: 3.45, y: 8), controlPoint2: CGPoint(x: 3, y: 7.55))
            combinedShape2.addLine(to: CGPoint(x: 3, y: 5))
            combinedShape2.addLine(to: CGPoint(x: 1, y: 5))
            combinedShape2.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 0.45, y: 5), controlPoint2: CGPoint(x: 0, y: 4.55))
            combinedShape2.addCurve(to: CGPoint(x: 1, y: 3), controlPoint1: CGPoint(x: 0, y: 3.45), controlPoint2: CGPoint(x: 0.45, y: 3))
            combinedShape2.addLine(to: CGPoint(x: 3, y: 3))
            combinedShape2.addLine(to: CGPoint(x: 3, y: 1))
            combinedShape2.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 3, y: 0.45), controlPoint2: CGPoint(x: 3.45, y: 0))
            combinedShape2.addCurve(to: CGPoint(x: 5, y: 1), controlPoint1: CGPoint(x: 4.55, y: 0), controlPoint2: CGPoint(x: 5, y: 0.45))
            combinedShape2.addLine(to: CGPoint(x: 5, y: 3))
            combinedShape2.close()
            combinedShape2.move(to: CGPoint(x: 5, y: 3))
            context.saveGState()
            context.translateBy(x: 70, y: 24)
            combinedShape2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            combinedShape2.fill()
            context.restoreGState()
            
            /// Profile Icon
            let profileIcon = UIBezierPath()
            profileIcon.move(to: CGPoint(x: 11.66, y: 8.97))
            profileIcon.addCurve(to: CGPoint(x: 7.17, y: 4.48), controlPoint1: CGPoint(x: 9.18, y: 8.97), controlPoint2: CGPoint(x: 7.17, y: 6.96))
            profileIcon.addCurve(to: CGPoint(x: 11.66, y: 0), controlPoint1: CGPoint(x: 7.17, y: 2.01), controlPoint2: CGPoint(x: 9.18, y: 0))
            profileIcon.addCurve(to: CGPoint(x: 16.14, y: 4.48), controlPoint1: CGPoint(x: 14.13, y: 0), controlPoint2: CGPoint(x: 16.14, y: 2.01))
            profileIcon.addCurve(to: CGPoint(x: 11.66, y: 8.97), controlPoint1: CGPoint(x: 16.14, y: 6.96), controlPoint2: CGPoint(x: 14.13, y: 8.97))
            profileIcon.close()
            profileIcon.move(to: CGPoint(x: 11.36, y: 22.02))
            profileIcon.addCurve(to: CGPoint(x: 0, y: 21.52), controlPoint1: CGPoint(x: 5.09, y: 22.02), controlPoint2: CGPoint(x: 0, y: 27.79))
            profileIcon.addCurve(to: CGPoint(x: 11.36, y: 10.16), controlPoint1: CGPoint(x: 0, y: 15.25), controlPoint2: CGPoint(x: 5.09, y: 10.16))
            profileIcon.addCurve(to: CGPoint(x: 22.72, y: 21.52), controlPoint1: CGPoint(x: 17.63, y: 10.16), controlPoint2: CGPoint(x: 22.72, y: 15.25))
            profileIcon.addCurve(to: CGPoint(x: 11.36, y: 22.02), controlPoint1: CGPoint(x: 22.72, y: 27.79), controlPoint2: CGPoint(x: 17.63, y: 22.02))
            profileIcon.close()
            profileIcon.move(to: CGPoint(x: 11.36, y: 22.02))
            context.saveGState()
            context.translateBy(x: 174, y: 15)
            profileIcon.usesEvenOddFillRule = true
            UIColor(hue: 0.536, saturation: 0.447, brightness: 0.894, alpha: 1).setFill()
            profileIcon.fill()
            context.restoreGState()
            
            /// Line
            let line = UIBezierPath()
            line.move(to: CGPoint(x: 0.5, y: 1.5))
            line.addLine(to: CGPoint(x: 375.51, y: 1.5))
            context.saveGState()
            line.lineCapStyle = .square
            line.lineWidth = 1
            UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
            line.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Content
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 211)
            
            /// GENERAL
            let gENERAL = NSMutableAttributedString(string: "GENERAL")
            gENERAL.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 18)!, range: NSRange(location: 0, length: gENERAL.length))
            context.saveGState()
            gENERAL.draw(at: CGPoint(x: 30, y: 11))
            context.restoreGState()
            
            /// Date of Birth
            let dateOfBirth = NSMutableAttributedString(string: "Date of Birth")
            dateOfBirth.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: dateOfBirth.length))
            context.saveGState()
            dateOfBirth.draw(in: CGRect(x: 32, y: 56, width: 129, height: 21))
            context.restoreGState()
            
            /// 01/22/1996
            let _01221996 = NSMutableAttributedString(string: "01/22/1996")
            _01221996.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 16)!, range: NSRange(location: 0, length: _01221996.length))
            context.saveGState()
            _01221996.draw(in: CGRect(x: 161, y: 56, width: 129, height: 21))
            context.restoreGState()
            
            /// 5’ 6’’
            let _56 = NSMutableAttributedString(string: "5’ 6’’")
            _56.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 16)!, range: NSRange(location: 0, length: _56.length))
            context.saveGState()
            _56.draw(in: CGRect(x: 161, y: 104, width: 129, height: 21))
            context.restoreGState()
            
            /// 125 lbs.
            let _125Lbs = NSMutableAttributedString(string: "125 lbs.")
            _125Lbs.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 16)!, range: NSRange(location: 0, length: _125Lbs.length))
            context.saveGState()
            _125Lbs.draw(in: CGRect(x: 159, y: 151, width: 129, height: 21))
            context.restoreGState()
            
            /// SYMPTOMS
            let sYMPTOMS = NSMutableAttributedString(string: "SYMPTOMS")
            sYMPTOMS.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 18)!, range: NSRange(location: 0, length: sYMPTOMS.length))
            context.saveGState()
            sYMPTOMS.draw(at: CGPoint(x: 30, y: 222))
            context.restoreGState()
            
            /// MEDICAL HISTORY
            let mEDICALHISTORY = NSMutableAttributedString(string: "MEDICAL HISTORY")
            mEDICALHISTORY.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 18)!, range: NSRange(location: 0, length: mEDICALHISTORY.length))
            context.saveGState()
            mEDICALHISTORY.draw(at: CGPoint(x: 32, y: 333))
            context.restoreGState()
            
            /// Line
            let line2 = UIBezierPath()
            line2.move(to: CGPoint(x: 0.5, y: 1.5))
            line2.addLine(to: CGPoint(x: 375.51, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 41)
            line2.lineCapStyle = .square
            line2.lineWidth = 1
            UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
            line2.stroke()
            context.restoreGState()
            
            /// Line
            let line3 = UIBezierPath()
            line3.move(to: CGPoint(x: 0.5, y: 1.5))
            line3.addLine(to: CGPoint(x: 375.51, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 87)
            line3.lineCapStyle = .square
            line3.lineWidth = 1
            UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
            line3.stroke()
            context.restoreGState()
            
            /// Runny nose
            let runnyNose = NSMutableAttributedString(string: "Runny nose")
            runnyNose.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: runnyNose.length))
            context.saveGState()
            runnyNose.draw(in: CGRect(x: 32, y: 266, width: 129, height: 21))
            context.restoreGState()
            
            /// Line
            let line4 = UIBezierPath()
            line4.move(to: CGPoint(x: 0.5, y: 1.5))
            line4.addLine(to: CGPoint(x: 375.51, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 297)
            line4.lineCapStyle = .square
            line4.lineWidth = 1
            UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
            line4.stroke()
            context.restoreGState()
            
            /// Height
            let height = NSMutableAttributedString(string: "Height")
            height.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: height.length))
            context.saveGState()
            height.draw(in: CGRect(x: 32, y: 104, width: 129, height: 21))
            context.restoreGState()
            
            /// Line
            let line5 = UIBezierPath()
            line5.move(to: CGPoint(x: 0.5, y: 1.5))
            line5.addLine(to: CGPoint(x: 375.51, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 135)
            line5.lineCapStyle = .square
            line5.lineWidth = 1
            UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
            line5.stroke()
            context.restoreGState()
            
            /// Weight
            let weight = NSMutableAttributedString(string: "Weight")
            weight.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: weight.length))
            context.saveGState()
            weight.draw(in: CGRect(x: 32, y: 151, width: 129, height: 21))
            context.restoreGState()
            
            /// Line
            let line6 = UIBezierPath()
            line6.move(to: CGPoint(x: 0.5, y: 1.5))
            line6.addLine(to: CGPoint(x: 375.51, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 182)
            line6.lineCapStyle = .square
            line6.lineWidth = 1
            UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
            line6.stroke()
            context.restoreGState()
            
            /// +
            let layer = NSMutableAttributedString(string: "+")
            layer.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 36)!, range: NSRange(location: 0, length: layer.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
            }
            context.saveGState()
            layer.draw(in: CGRect(x: 316, y: 0, width: 34, height: 46))
            context.restoreGState()
            
            /// Line
            let line7 = UIBezierPath()
            line7.move(to: CGPoint(x: 0.5, y: 1.5))
            line7.addLine(to: CGPoint(x: 375.51, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 253)
            line7.lineCapStyle = .square
            line7.lineWidth = 1
            UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
            line7.stroke()
            context.restoreGState()
            
            /// +
            let layer2 = NSMutableAttributedString(string: "+")
            layer2.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 36)!, range: NSRange(location: 0, length: layer2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer2.length))
            }
            context.saveGState()
            layer2.draw(in: CGRect(x: 316, y: 212, width: 34, height: 46))
            context.restoreGState()
            
            /// Line
            let line8 = UIBezierPath()
            line8.move(to: CGPoint(x: 0.5, y: 1.5))
            line8.addLine(to: CGPoint(x: 375.51, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 364)
            line8.lineCapStyle = .square
            line8.lineWidth = 1
            UIColor(hue: 0.75, saturation: 0.009, brightness: 0.827, alpha: 1).setStroke()
            line8.stroke()
            context.restoreGState()
            
            /// 01/22/1996
            let _2 = NSMutableAttributedString(string: "01/22/1996")
            _2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: _2.length))
            context.saveGState()
            _2.draw(in: CGRect(x: 161, y: 56, width: 129, height: 21))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Anna Smith
        let annaSmith = NSMutableAttributedString(string: "Anna Smith")
        annaSmith.addAttribute(.font, value: UIFont(name: "ProximaNovaA-Bold", size: 25)!, range: NSRange(location: 0, length: annaSmith.length))
        context.saveGState()
        annaSmith.draw(at: CGPoint(x: 121, y: 156))
        context.restoreGState()
        /// notifications-button
        // Warning: Image layers are not supported.
        /// Mask
        let mask = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 104, height: 104))
        context.saveGState()
        context.translateBy(x: 136, y: 46)
        UIColor(white: 0.847, alpha: 1).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 136, y: 46))
        mask.addClip()
        
        /// profile_pic
        // Warning: Image layers are not supported.
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawRegistration(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Bars/Status/Black
        // Warning: New symbols are not supported.
        /// Rectangle 3
        let rectangle3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 614))
        context.saveGState()
        context.translateBy(x: 475, y: 27)
        UIColor.white.setFill()
        rectangle3.fill()
        context.restoreGState()
        /// Content
        do {
            context.saveGState()
            context.translateBy(x: 57, y: 263)
            
            /// Line
            let line = UIBezierPath()
            line.move(to: CGPoint(x: 0.5, y: 1.5))
            line.addLine(to: CGPoint(x: 261.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 23)
            line.lineCapStyle = .square
            line.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line.stroke()
            context.restoreGState()
            
            /// First Name
            let firstName = NSMutableAttributedString(string: "First Name")
            firstName.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 15)!, range: NSRange(location: 0, length: firstName.length))
            context.saveGState()
            firstName.draw(in: CGRect(x: 0, y: 0, width: 161, height: 20))
            context.restoreGState()
            
            /// Line
            let line2 = UIBezierPath()
            line2.move(to: CGPoint(x: 0.5, y: 1.5))
            line2.addLine(to: CGPoint(x: 260.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 72)
            line2.lineCapStyle = .square
            line2.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line2.stroke()
            context.restoreGState()
            
            /// Last Name
            let lastName = NSMutableAttributedString(string: "Last Name")
            lastName.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 15)!, range: NSRange(location: 0, length: lastName.length))
            context.saveGState()
            lastName.draw(in: CGRect(x: 0, y: 54, width: 161, height: 20))
            context.restoreGState()
            
            /// Line
            let line3 = UIBezierPath()
            line3.move(to: CGPoint(x: 0.5, y: 1.5))
            line3.addLine(to: CGPoint(x: 261.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 123)
            line3.lineCapStyle = .square
            line3.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line3.stroke()
            context.restoreGState()
            
            /// Email
            let email = NSMutableAttributedString(string: "Email")
            email.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 15)!, range: NSRange(location: 0, length: email.length))
            context.saveGState()
            email.draw(in: CGRect(x: 0, y: 100, width: 161, height: 20))
            context.restoreGState()
            
            /// Line
            let line4 = UIBezierPath()
            line4.move(to: CGPoint(x: 0.5, y: 1.5))
            line4.addLine(to: CGPoint(x: 260.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 172)
            line4.lineCapStyle = .square
            line4.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line4.stroke()
            context.restoreGState()
            
            /// Password
            let password = NSMutableAttributedString(string: "Password")
            password.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 15)!, range: NSRange(location: 0, length: password.length))
            context.saveGState()
            password.draw(in: CGRect(x: 0, y: 152, width: 161, height: 20))
            context.restoreGState()
            
            /// Line
            let line5 = UIBezierPath()
            line5.move(to: CGPoint(x: 0.5, y: 1.5))
            line5.addLine(to: CGPoint(x: 260.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 217)
            line5.lineCapStyle = .square
            line5.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line5.stroke()
            context.restoreGState()
            
            /// Verify Password
            let verifyPassword = NSMutableAttributedString(string: "Verify Password")
            verifyPassword.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 15)!, range: NSRange(location: 0, length: verifyPassword.length))
            context.saveGState()
            verifyPassword.draw(in: CGRect(x: 0, y: 199, width: 161, height: 20))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 67, y: 538)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 243, height: 40), cornerRadius: 25)
            context.saveGState()
            UIColor(hue: 0.999, saturation: 0.647, brightness: 1, alpha: 1).setFill()
            rectangle.fill()
            context.restoreGState()
            
            /// Register
            let register2 = NSMutableAttributedString(string: "Register")
            register2.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 17)!, range: NSRange(location: 0, length: register2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                register2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: register2.length))
            }
            context.saveGState()
            register2.draw(in: CGRect(x: 51, y: 9, width: 141, height: 22))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Sign Up
        let signUp = NSMutableAttributedString(string: "Sign Up")
        signUp.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 36)!, range: NSRange(location: 0, length: signUp.length))
        context.saveGState()
        signUp.draw(in: CGRect(x: 49, y: 61, width: 277, height: 57))
        context.restoreGState()
        /// Nevermind, I’ll logi
        let nevermindIllLogi = NSMutableAttributedString(string: "Nevermind, I’ll login")
        nevermindIllLogi.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 15)!, range: NSRange(location: 0, length: nevermindIllLogi.length))
        nevermindIllLogi.addAttribute(.underlineStyle, value: NSUnderlineStyle.styleSingle.rawValue, range: NSRange(location: 0, length: nevermindIllLogi.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            nevermindIllLogi.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: nevermindIllLogi.length))
        }
        context.saveGState()
        nevermindIllLogi.draw(in: CGRect(x: 104, y: 587, width: 168, height: 29))
        context.restoreGState()
        /// Mask
        let mask = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 104, height: 104))
        context.saveGState()
        context.translateBy(x: 136, y: 138)
        UIColor(white: 0.847, alpha: 1).setFill()
        mask.fill()
        context.restoreGState()
        
        /// Mask (Outline Mask)
        context.saveGState()
        mask.apply(CGAffineTransform(translationX: 136, y: 138))
        mask.addClip()
        
        /// Profile Pic
        let profilePic = UIBezierPath()
        profilePic.move(to: CGPoint(x: 45.67, y: 34.94))
        profilePic.addCurve(to: CGPoint(x: 28.11, y: 17.47), controlPoint1: CGPoint(x: 35.97, y: 34.94), controlPoint2: CGPoint(x: 28.11, y: 27.12))
        profilePic.addCurve(to: CGPoint(x: 45.67, y: 0), controlPoint1: CGPoint(x: 28.11, y: 7.82), controlPoint2: CGPoint(x: 35.97, y: 0))
        profilePic.addCurve(to: CGPoint(x: 63.24, y: 17.47), controlPoint1: CGPoint(x: 55.37, y: 0), controlPoint2: CGPoint(x: 63.24, y: 7.82))
        profilePic.addCurve(to: CGPoint(x: 45.67, y: 34.94), controlPoint1: CGPoint(x: 63.24, y: 27.12), controlPoint2: CGPoint(x: 55.37, y: 34.94))
        profilePic.close()
        profilePic.move(to: CGPoint(x: 44.5, y: 100.54))
        profilePic.addCurve(to: CGPoint(x: 0, y: 97.97), controlPoint1: CGPoint(x: 19.92, y: 100.54), controlPoint2: CGPoint(x: 0, y: 130.21))
        profilePic.addCurve(to: CGPoint(x: 44.5, y: 39.6), controlPoint1: CGPoint(x: 0, y: 65.73), controlPoint2: CGPoint(x: 19.92, y: 39.6))
        profilePic.addCurve(to: CGPoint(x: 89, y: 97.97), controlPoint1: CGPoint(x: 69.08, y: 39.6), controlPoint2: CGPoint(x: 89, y: 65.73))
        profilePic.addCurve(to: CGPoint(x: 44.5, y: 100.54), controlPoint1: CGPoint(x: 89, y: 130.21), controlPoint2: CGPoint(x: 69.08, y: 100.54))
        profilePic.close()
        profilePic.move(to: CGPoint(x: 44.5, y: 100.54))
        context.saveGState()
        context.translateBy(x: 144, y: 150)
        profilePic.usesEvenOddFillRule = true
        UIColor(hue: 0.583, saturation: 0.008, brightness: 0.988, alpha: 1).setFill()
        profilePic.fill()
        context.restoreGState()
        
        context.restoreGState()
        // End Mask (Outline Mask)
        
        context.restoreGState()
    }
    
    class func drawLogin(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Bars/Status/Black
        // Warning: New symbols are not supported.
        /// Rectangle 3
        let rectangle3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 614))
        context.saveGState()
        context.translateBy(x: 475, y: 27)
        UIColor.white.setFill()
        rectangle3.fill()
        context.restoreGState()
        /// Forgot your password
        let forgotYourPassword = NSMutableAttributedString(string: "Forgot your password?")
        forgotYourPassword.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 14)!, range: NSRange(location: 0, length: forgotYourPassword.length))
        forgotYourPassword.addAttribute(.underlineStyle, value: NSUnderlineStyle.styleSingle.rawValue, range: NSRange(location: 0, length: forgotYourPassword.length))
        context.saveGState()
        forgotYourPassword.draw(in: CGRect(x: 119, y: 503, width: 168, height: 29))
        context.restoreGState()
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 57, y: 283)
            
            /// Line
            let line = UIBezierPath()
            line.move(to: CGPoint(x: 0.5, y: 1.5))
            line.addLine(to: CGPoint(x: 261.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 23)
            line.lineCapStyle = .square
            line.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line.stroke()
            context.restoreGState()
            
            /// Email
            let email = NSMutableAttributedString(string: "Email")
            email.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 15)!, range: NSRange(location: 0, length: email.length))
            context.saveGState()
            email.draw(in: CGRect(x: 0, y: 0, width: 161, height: 20))
            context.restoreGState()
            
            /// Line
            let line2 = UIBezierPath()
            line2.move(to: CGPoint(x: 0.5, y: 1.5))
            line2.addLine(to: CGPoint(x: 260.5, y: 1.5))
            context.saveGState()
            context.translateBy(x: 0, y: 72)
            line2.lineCapStyle = .square
            line2.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line2.stroke()
            context.restoreGState()
            
            /// Password
            let password = NSMutableAttributedString(string: "Password")
            password.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 15)!, range: NSRange(location: 0, length: password.length))
            context.saveGState()
            password.draw(in: CGRect(x: 0, y: 52, width: 161, height: 20))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 66, y: 396)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 243, height: 40), cornerRadius: 25)
            context.saveGState()
            UIColor(hue: 0.999, saturation: 0.647, brightness: 1, alpha: 1).setFill()
            rectangle.fill()
            context.restoreGState()
            
            /// Login
            let login2 = NSMutableAttributedString(string: "Login")
            login2.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 17)!, range: NSRange(location: 0, length: login2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                login2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: login2.length))
            }
            context.saveGState()
            login2.draw(in: CGRect(x: 51, y: 9, width: 141, height: 22))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 66, y: 448)
            
            /// Rectangle
            let rectangle6 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 243, height: 40), cornerRadius: 25)
            context.saveGState()
            context.saveGState()
            rectangle6.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle6.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.999, saturation: 0.647, brightness: 1, alpha: 1).setStroke()
            rectangle6.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Register
            let register2 = NSMutableAttributedString(string: "Register")
            register2.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 17)!, range: NSRange(location: 0, length: register2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                register2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: register2.length))
            }
            context.saveGState()
            register2.draw(in: CGRect(x: 51, y: 9, width: 141, height: 22))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 49, y: 128)
            
            /// My Health Profile
            let myHealthProfile = NSMutableAttributedString(string: "My Health Profile")
            myHealthProfile.addAttribute(.font, value: UIFont(name: "ProximaNova-Semibold", size: 36)!, range: NSRange(location: 0, length: myHealthProfile.length))
            context.saveGState()
            myHealthProfile.draw(in: CGRect(x: 0, y: 17, width: 277, height: 57))
            context.restoreGState()
            
            /// Welcome back to
            let welcomeBackTo = NSMutableAttributedString(string: "Welcome back to")
            welcomeBackTo.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 15)!, range: NSRange(location: 0, length: welcomeBackTo.length))
            context.saveGState()
            welcomeBackTo.draw(in: CGRect(x: 2, y: 0, width: 208, height: 22))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    /// Symbols
    
    class func drawUser(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 31)
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 14.37, y: 11.05))
        combinedShape.addCurve(to: CGPoint(x: 8.84, y: 5.53), controlPoint1: CGPoint(x: 11.32, y: 11.05), controlPoint2: CGPoint(x: 8.84, y: 8.58))
        combinedShape.addCurve(to: CGPoint(x: 14.37, y: 0), controlPoint1: CGPoint(x: 8.84, y: 2.47), controlPoint2: CGPoint(x: 11.32, y: 0))
        combinedShape.addCurve(to: CGPoint(x: 19.89, y: 5.53), controlPoint1: CGPoint(x: 17.42, y: 0), controlPoint2: CGPoint(x: 19.89, y: 2.47))
        combinedShape.addCurve(to: CGPoint(x: 14.37, y: 11.05), controlPoint1: CGPoint(x: 19.89, y: 8.58), controlPoint2: CGPoint(x: 17.42, y: 11.05))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 14, y: 27.14))
        combinedShape.addCurve(to: CGPoint(x: 0, y: 26.53), controlPoint1: CGPoint(x: 6.27, y: 27.14), controlPoint2: CGPoint(x: 0, y: 34.26))
        combinedShape.addCurve(to: CGPoint(x: 14, y: 12.53), controlPoint1: CGPoint(x: 0, y: 18.79), controlPoint2: CGPoint(x: 6.27, y: 12.53))
        combinedShape.addCurve(to: CGPoint(x: 28, y: 26.53), controlPoint1: CGPoint(x: 21.73, y: 12.53), controlPoint2: CGPoint(x: 28, y: 18.79))
        combinedShape.addCurve(to: CGPoint(x: 14, y: 27.14), controlPoint1: CGPoint(x: 28, y: 34.26), controlPoint2: CGPoint(x: 21.73, y: 27.14))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 14, y: 27.14))
        context.saveGState()
        combinedShape.usesEvenOddFillRule = true
        UIColor(white: 0.928, alpha: 1).setFill()
        combinedShape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfEditInfo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        Design1.drawEditInfo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfAddInfo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        Design1.drawAddInfo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProfile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        Design1.drawProfile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRegistration() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        Design1.drawRegistration()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLogin() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        Design1.drawLogin()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Symbols
    
    class func imageOfUser() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 31), false, 0)
        Design1.drawUser()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
